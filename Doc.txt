Game class: PL, PM, TB
    fields:
    - boolean isRunning
    - Players players
    - Player current
    - Player winner
    - Board board
    - Ui userInterface

    methods:
    - main
    - runTheGame
    - setWinner

Dice class: TB
    fields:
    - int value
    - Random generator

    methods:
    - Dice:
        input: none
        output: none
        //Constructor

    - throwDice:
        input: none
        output: a random generated int between 0 and 7 (exclusive)

Board class: PL
    fields:
    - DONE: ArrayList<Square> squareList
    - TODO: Players players
    - DONE: int size
    - DONE: firstSquare
    - DONE: lastSquare


    methods:
    - DONE: getSize()
        returns size

    - DONE: initBoard(int size, Queue playerQueue)
        fills board with squares and sets players on the first square

    - DONE: findSquare
    - DONE: setWinner

UI class: TB
    fields:
    - none

    methods:
    - getPlayers
    - printGame
    - celebrateWinner

Player class: PL
    fields:
    - Square currentSquare
    - String name

    methods:
    - DONE: getCurrentSquare
    - DONE: setCurrentSquare
    - DONE: moveFwd
    - DONE: getName

Players class: PL
    fields:
    - Queue<Player> playerQueue
    - ArrayList<Player> playerList

    methods:
    - DONE: initQueue
    - DONE: getQueue
    - DONE: remove
    - DONE: add
    - DONE: getCurrentPlayer


Squares abstract class: PM
    fields:
    - Board board
    - int index
    - boolean singleSpace
    - ArrayList<Player> currentPlayers
    - String type

    methods:
    - isOccupied()
        returns true if occupied, false if free

    - getIndex()
        returns index of square as int

    - addPlayer(Player p)
        takes Player p and adds it to ArrayList<Player> currentPlayers

    - removePlayer(Player p)
        removes Player p from ArrayList<Player> currentPlayers

    - getType()
        returns string which indicates the type of the square

    - setType(String type)
        sets type of square to given string (Needs to be a valid type!)

    - moveAndLand(int distance, Player p)
        given an integer distance and Player p, this method calculates & returns the square the player will move to

    - requestLanding(Player p)
        abstract method which gets implemented by children. The reason for this is, that it differs quite a bit across
        the types of squares.


FirstSquare class PM
    fields:
    - inherits all fields from abstract class Squares

    methods:
    - inherits all methods from abstract class Squares





